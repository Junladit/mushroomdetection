import json
import os
import cv2
import glob
import time
import requests
import gspread
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google.oauth2.service_account import Credentials
from datetime import datetime
import sys

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ console ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö UTF-8
sys.stdout.reconfigure(encoding='utf-8')

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Sheets
SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']

try:
    creds = Credentials.from_service_account_file("myservice.json", scopes=SCOPES)
    gc = gspread.authorize(creds)
    spreadsheet = gc.open('linebot')
    worksheet = spreadsheet.sheet1
    data_worksheet = spreadsheet.worksheet('data')
except Exception as e:
    print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets: {e}")
    sys.exit(1)  # ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Drive
drive_service = build('drive', 'v3', credentials=creds)

# üìÇ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≤‡∏á ‡πÜ
image_folder = "image"  # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
detected_folder = "detected_images"  # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß
training_folder = "training"  # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö training
json_file_path = "output_data.json"
folder_id = "1i3hQizoo73C2e4_9p7_3c0Moc-mGNVNT"  # ‡πÉ‡∏™‡πà Folder ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô Google Drive

# üìå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
os.makedirs(image_folder, exist_ok=True)
os.makedirs(detected_folder, exist_ok=True)
os.makedirs(training_folder, exist_ok=True)

# üöÄ **‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Roboflow API**
ROBOFLOW_API_KEY = 'dyO5PlGICDRRTo6Wd6Q2'
ROBOFLOW_MODEL_ID = 'mushroom-709o6'
ROBOFLOW_VERSION = '1'
ROBOFLOW_API_URL = f'https://detect.roboflow.com/{ROBOFLOW_MODEL_ID}/{ROBOFLOW_VERSION}?api_key={ROBOFLOW_API_KEY}&confidence=20'

# üì∏ **‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ã‡∏ü‡∏•‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `image/`**
def capture_image():
    cap = cv2.VideoCapture(0)  # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏Å
    if not cap.isOpened():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
        return None
    
    ret, frame = cap.read()
    cap.release()  # ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á

    if ret:
        # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå ‡πÄ‡∏ä‡πà‡∏ô "01.png", "02.png", ...
        image_files = sorted(glob.glob(os.path.join(image_folder, "*.png")))
        new_image_number = len(image_files) + 1  # ‡πÄ‡∏•‡∏Ç‡∏†‡∏≤‡∏û‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        image_path = os.path.join(image_folder, f"{new_image_number:02}.png")

        cv2.imwrite(image_path, frame)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ
        print(f"üì∑ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {image_path}")
        return image_path
    else:
        print("‚ùå ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return None

# üñº **‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `image/`**
def get_latest_image():
    image_files = sorted(glob.glob(os.path.join(image_folder, "*.png")))
    return image_files[-1] if image_files else None

# üì§ **‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive**
def upload_image_to_drive(image_path, folder_id):
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á metadata ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå
        file_metadata = {
            'name': os.path.basename(image_path),  # ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
            'parents': [folder_id]  # ID ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
        }

        # ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
        media = MediaFileUpload(image_path, resumable=True)
        file = drive_service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id, name'
        ).execute()

        print(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {file.get('name')} (ID: {file.get('id')})")
        return True, file.get('name')
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: {e}")
        return False, None

# üèÅ **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô**
captured_image = capture_image()  # ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ
if captured_image:
    latest_image = get_latest_image()  # ‡∏î‡∏∂‡∏á‡∏†‡∏≤‡∏û‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå image
    if latest_image:
        # üìå ‡πÉ‡∏ä‡πâ Roboflow API ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
        with open(latest_image, 'rb') as image_file:
            response = requests.post(ROBOFLOW_API_URL, files={'file': image_file})

        if response.status_code == 200:
            results = response.json()
            print(f"‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Roboflow: {results}")

            # üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            detections = results['predictions']

            # ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            image = cv2.imread(latest_image)

            # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πâ‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
            detection_dict = {}
            for idx, detection in enumerate(detections):
                label = detection['class']
                confidence = detection['confidence']
                detection_dict[f"‡∏Å‡πâ‡∏≠‡∏ô‡∏ó‡∏µ‡πà{idx+1}"] = label  # ‡πÄ‡∏ä‡πà‡∏ô "‡∏Å‡πâ‡∏≠‡∏ô‡∏ó‡∏µ‡πà1": "big"

                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á bounding box ‡∏à‡∏≤‡∏Å x, y, width, height
                x = int(detection['x'])
                y = int(detection['y'])
                width = int(detection['width'])
                height = int(detection['height'])

                x1 = int(x - width / 2)  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì x1
                y1 = int(y - height / 2)  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì y1
                x2 = int(x + width / 2)  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì x2
                y2 = int(y + height / 2)  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì y2

                # ‡∏ß‡∏≤‡∏î bounding box ‡πÅ‡∏•‡∏∞ label ‡∏ö‡∏ô‡∏†‡∏≤‡∏û
                cv2.rectangle(image, (x1, y1), (x2, y2), (0, 255, 0), 2)  # ‡∏ß‡∏≤‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á
                cv2.putText(image, f"{label} {confidence:.2f}", (x1, y1 - 10), 
                            cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)  # ‡∏ß‡∏≤‡∏î label

            # üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            if os.path.exists(json_file_path):
                with open(json_file_path, 'r', encoding='utf-8') as json_file:
                    try:
                        existing_data = json.load(json_file)
                    except json.JSONDecodeError:
                        existing_data = []
            else:
                existing_data = []

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
            existing_data.append(detection_dict)

            # üîÑ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON
            with open(json_file_path, 'w', encoding='utf-8') as json_file:
                json.dump(existing_data, json_file, ensure_ascii=False, indent=4)

            print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á {json_file_path}")

            # üìÇ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î bounding box ‡πÅ‡∏•‡∏∞ label ‡∏•‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå training
            image_filename = os.path.basename(latest_image)
            training_image_path = os.path.join(training_folder, image_filename)
            cv2.imwrite(training_image_path, image)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß
            print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏¢‡∏±‡∏á {training_image_path}")

            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Sheets
            try:
                with open(json_file_path, 'r', encoding='utf-8') as json_file:
                    json_data = json.load(json_file)

                if not json_data:
                    print("‚ö† ‡πÑ‡∏ü‡∏•‡πå JSON ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
                else:
                    last_entry = json_data[-1]
                    required_keys = [f"‡∏Å‡πâ‡∏≠‡∏ô‡∏ó‡∏µ‡πà{i}" for i in range(1, 6)]
                    values = [last_entry.get(key, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•") for key in required_keys]

                    worksheet.batch_update([ 
                        {"range": "B1", "values": [[values[0]]]}, 
                        {"range": "B2", "values": [[values[1]]]}, 
                        {"range": "B3", "values": [[values[2]]]}, 
                        {"range": "B4", "values": [[values[3]]]}, 
                        {"range": "B5", "values": [[values[4]]]}, 
                        {"range": "B6", "values": [[values[4]]]}, 
                    ])

                    next_row_data = len(data_worksheet.col_values(1)) + 1
                    data_worksheet.batch_update([ 
                        {"range": f"A{next_row_data}", "values": [[values[0]]]}, 
                        {"range": f"B{next_row_data}", "values": [[values[1]]]}, 
                        {"range": f"C{next_row_data}", "values": [[values[2]]]}, 
                        {"range": f"D{next_row_data}", "values": [[values[3]]]}, 
                        {"range": f"E{next_row_data}", "values": [[values[4]]]}, 
                        {"range": f"F{next_row_data}", "values": [[values[4]]]}, 
                    ])

                    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    print(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {current_time}")

            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")

            # ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå image
            latest_image = get_latest_image()
            if latest_image:
                # ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive
                uploaded_file = upload_image_to_drive(latest_image, folder_id)
                if uploaded_file:
                    print(f"‚úÖ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive: {uploaded_file[1]}")
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `image/`")
        else:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Roboflow API: {response.status_code}")
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `image/`")


#         {
#   "type": "service_account",
#   "project_id": "stunning-hull-447607-j5",
#   "private_key_id": "5522a5c1f09958aef58771c185b85963ad26f5bd",
#   "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCgRJVjzCLECpRW\nHHOJooTMmnbU7TDxhSyZKTh0WupJew7F53nzBKIgfdkcVYrhu+D00HaEad4G8bgB\n5fdxlewkBvcTqIAM1u4p4dKX0UdlePg1tXOBGwu5c7C9Ph/fn4OeI1TOXgfGnWnL\nwJDalBQwFhCOL2ornFRF3Rl8EI6SorOqXHWArGqS+5yKBG2oqOKWqsANq0XahMvs\nAAH+xHFFjn7JlQb3vaDkdhoba+eDSIaye7uZwF4+YlbTO3PgU0bDbZMsBllGm0U9\nwu9XMCCL9h7ycMsqNAgHEWvlgOpTLFNR1I4KEqlzs1PKZJR7Cm8uzw8gFGsNtodg\ndXG+MZJ1AgMBAAECggEAHiyrf82oYgan5QqYSjqaDDes1ewOgfqT6gZTxbx0Tf9o\nSaSKVlHyAHIRVX9ZlaSc9xrkpYuVLPOHtHvKuc0DV8kj7cSUz1YMI0CMON9DNPyw\nptQR+iXQcEsy5H5029KZokV+qxgTGLb8e0s3OqAUqPUOiuasc6eMSlcVfEFVxo+l\nPD8CcLmcSEilg+n4VFp3Rfaqm8sP2tYCM4HihSFEjiFqvLAxWHEqlE1czL7IjIXa\n5MOlvJneRZ8FnlL30AuMgN526wKcbiimQgZOa0IKDLoH1FUYKOij88tQxqt3RPVF\nk9If1Alshn69+hCI6cTkxlhsEXB9HQcbXZb5npdoIQKBgQDQYQLqm/yOdJjThNK2\nNUzMvWaQHcVB7kDn6PpVkgAgqkzEUKUUenv1/QUBXw/I3D+o+G6qOg8ZaThNwFaw\npeZIoBaWGLP22sE5SYSZLKa6CuzUGibb+0ScdF72rACQQdO8jTdlOSAT0xXC3ePb\n4ZVSjHuPq40vwa73xexVoOanTQKBgQDE5OL6iiUffLRI1RJCPisGoc9uReG/qqpR\npnI+Qb3T2FufqjFSLtzl26NINASKIzLJoW8BT29Q6wvif15hR8I7UBzr6F00kx/k\n2jGr7Gj3UxRcHqo7kxYTPjrGrbOZRpfLbCy3fdQ4OZ7nprgjK+/XVVmRd3Z6Jn5E\ntmRctaOTyQKBgQCBJO6yynQPMfIZfYM+C/CKH4Q2I01CnE+7qyei6vaLSCCFttlo\nxLSY8vQsMmdM/Du0FCw58fuzqwOLJH5VwqvjLNxyr+KxRkhkocy9RfAa83Rty7tz\nsNmIAZNtW5KJ1VJN1FOVt37K6pLdD7oNZ1StMYXOt+qrw2UWCKN9OlhZLQKBgBWY\nVRzNkgzGDLAATqRdVTLBBJM/rubqvQt/igAyDbPygvocHJS69xdu45XDvsu32JYs\n0pP+NmNVpFQPTDa3PCJtQv7M2Ywupsze8Zu9rjWSMyV3Z4xpMX6i0KeB3bTt/TAe\niTkG4APargcSThftdbzUa6J8y83R8v9uUcupUGuhAoGBAKdxAsR3TYfAUsvmrnT0\nEDvN0O4PI3ID38DSzQ/85INuLGSNbbRTvtRLJqugsOcidUofYW7XTR12MjfmVTXK\n8l3OSaRn1cExurYkKef7SR7SWyAVju3xiONu5f25TwybWgeUCIYQRtijN2y6fC7w\n21JOBbgmvEbdeRuGL6kfplS2\n-----END PRIVATE KEY-----\n",
#   "client_email": "my-service-account@stunning-hull-447607-j5.iam.gserviceaccount.com",
#   "client_id": "101389116624633606164",
#   "auth_uri": "https://accounts.google.com/o/oauth2/auth",
#   "token_uri": "https://oauth2.googleapis.com/token",
#   "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
#   "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/my-service-account%40stunning-hull-447607-j5.iam.gserviceaccount.com",
#   "universe_domain": "googleapis.com"
# }
